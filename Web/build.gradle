plugins {
    id 'java-library' 
}

version = project.mod_version
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'CustomPlayerModels-GWT'

def useLib = System.getProperty("useLib")
def doBuild = System.getProperty("doBuild")

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    mavenCentral()
    maven {
    	name = "tom5454 maven"
    	url = "https://raw.githubusercontent.com/tom5454/maven/main"
  	}
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
    priority
    sourceSets.main.compileClasspath = sourceSets.main.compileClasspath + configurations.priority
}

sourceSets {
	main {
		java {
			srcDir "src/main/java"
		}
		resources {
			srcDir "src/main/java"
		}
	}
	if ("${useLib}" == "null") {
		main {
			java {
				srcDir "../CustomPlayerModels/src/shared/java"
			
				exclude "com/tom/cpl/util/Image.java"
				exclude "com/tom/cpl/util/NettyByteBufInputStream.java"
				exclude "com/tom/cpl/util/StringBuilderStream.java"
				exclude "com/tom/cpl/util/AWTChooser.java"
				exclude "com/tom/cpl/util/AWTImageIO.java"
				exclude "com/tom/cpl/gui/elements/ProcessPopup.java"
				exclude "com/tom/cpl/config/ModConfigFile.java"
				exclude "com/tom/cpl/command/BrigadierCommandHandler.java"
				exclude "com/tom/cpm/api/ClientApi.java"
				exclude "com/tom/cpm/api/CommonApi.java"
				exclude "com/tom/cpm/externals/org/apache/commons/math3/PolynomialFunction.java"
				exclude "com/tom/cpm/shared/editor/TestIngameManager.java"
				exclude "com/tom/cpm/shared/editor/project/ProjectFile.java"
				exclude "com/tom/cpm/shared/loaders/HttpResourceLoader.java"
				exclude "com/tom/cpm/shared/loaders/PasteResourceLoader.java"
				exclude "com/tom/cpm/shared/model/render/BoxRender.java"
				exclude "com/tom/cpm/shared/paste/PasteClient.java"
				exclude "com/tom/cpm/shared/util/MojangAPI.java"
				exclude "com/tom/cpm/shared/util/MdResourceIO.java"
				exclude "com/tom/cpm/shared/util/VersionCheck.java"
				exclude "com/tom/cpm/shared/util/ModelLoadingPool.java"
			}
			resources {
				srcDir "../CustomPlayerModels/src/shared/resources"
			}
		}
	}
	main {
		java {
			srcDir "src/build"
			exclude "com/ekotrope/gwt/emul/**"
		}
		resources {
			srcDir "src/build"
			if(!doBuild)exclude "com/ekotrope/gwt/emul/**"
		}
		compileClasspath = main.compileClasspath + files(main.java.srcDirs)
	}
	blockbench {
		compileClasspath = main.compileClasspath + main.output
		java {
			srcDir "src/blockbench/java"
		}
		resources {
			srcDir "src/blockbench/resources"
		}
	}
	main {
		java {
			srcDir "src/fbxtool/java"
		}
		resources {
			srcDir "src/fbxtool/resources"
		}
		compileClasspath = main.compileClasspath + files(main.java.srcDirs)
	}
}

dependencies {
    implementation "com.google.elemental2:elemental2-core:1.1.0"
    implementation "com.google.elemental2:elemental2-webgl:1.1.0"
    implementation "com.google.elemental2:elemental2-webstorage:1.1.0"
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.google.guava:guava-gwt:31.1-jre'
    //implementation "com.ekotrope:gwt-completablefuture:1.0.0"
    implementation 'org.gwtproject:gwt-user:2.10.0'
    implementation 'org.gwtproject:gwt-dev:2.10.0'
    implementation 'org.gwtproject:gwt-codeserver:2.10.0'
    implementation 'javax.validation:validation-api:1.0.0.GA'
    implementation 'javax.validation:validation-api:1.0.0.GA:sources'
    implementation 'org.slf4gwt:slf4gwt:1.4'
    /*implementation 'com.alexdupre:pngj:2.1.2.1'
    implementation 'com.alexdupre:pngj:2.1.2.1:sources'
    implementation 'com.jcraft:jzlib:1.1.3'
    implementation 'com.jcraft:jzlib:1.1.3:sources'*/
    if ("${useLib}" != "null") {
    	extraLibs "com.tom5454.cpm:CustomPlayerModels-API:0.6.4"
    	extraLibs "com.tom5454.cpm:CustomPlayerModels-API:0.6.4:sources"
    }
    priority files(sourceSets.main.java.srcDirs)
	priority files(sourceSets.blockbench.java.srcDirs)
    
    configurations.runtimeOnly.extendsFrom(configurations.priority);
    configurations.implementation.extendsFrom(configurations.extraLibs)
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	duplicatesStrategy = "exclude"
    from sourceSets.main.output
    from sourceSets.main.allJava
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "tom5454",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : "tom5454",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile) {
    //options.compilerArgs << "-verbose"  //Enable if javac stack overflows
}

import java.util.stream.*

def getFixedClasspath() {
    def cp = sourceSets.main.runtimeClasspath.toList()
    def sortMap = [:]
    for (int i = 0; i < cp.size(); i++) {
        if (cp[i].getName().endsWith(".jar")) {
            sortMap[cp[i]] = i + 100
        } else {
            sortMap[cp[i]] = i
        }
    }
    return files(Arrays.stream(cp).sorted(Comparator.comparingInt(sortMap::get)).collect(Collectors.toList()))
}

task devMode(type:JavaExec, dependsOn: 'compileJava') {
   main = "com.tom.cpm.web.gwt.MainWrapper"
   classpath = getFixedClasspath()
}

task compileEditor(type:JavaExec, dependsOn: 'compileJava') {
   main = "com.tom.cpm.web.gwt.MainWrapper"
   classpath = getFixedClasspath()
   
   systemProperties = [ "ugwt.useStrongName":"true" ]
   
   args "--build", "${version}", "Editor"
}

task compileViewer(type:JavaExec, dependsOn: 'compileJava') {
   main = "com.tom.cpm.web.gwt.MainWrapper"
   classpath = getFixedClasspath()
   
   systemProperties = [ "ugwt.useStrongName":"true" ]
   
   args "--build", "${version}", "Viewer"
}

task compileProjectViewer(type:JavaExec, dependsOn: 'compileJava') {
   main = "com.tom.cpm.web.gwt.MainWrapper"
   classpath = getFixedClasspath()
   
   systemProperties = [ "ugwt.useStrongName":"true" ]
   
   args "--build", "${version}", "ProjectViewer"
}

task compileBlockbench(type:JavaExec, dependsOn: 'compileJava') {
   main = "com.tom.cpm.web.gwt.MainWrapper"
   classpath = getFixedClasspath()
   
   systemProperties = [ "ugwt.useContext":"true" ]
   
   args "--build", "${version}", "Blockbench"
}

task compileFBXTool(type:JavaExec, dependsOn: 'compileJava') {
   main = "com.tom.cpm.web.gwt.MainWrapper"
   classpath = getFixedClasspath()
   
   systemProperties = [ "ugwt.useStrongName":"true" ]
   
   args "--build", "${version}", "FBXTool"
}

task blockbenchDevServer(type:JavaExec, dependsOn: 'compileJava') {
   main = "com.tom.blockbench.BlockbenchServer"
   classpath = getFixedClasspath()
   standardInput = System.in
   
   jvmArgs "-Xdebug", "-Xrunjdwp:server=n,transport=dt_socket,address=4013,suspend=y"
}