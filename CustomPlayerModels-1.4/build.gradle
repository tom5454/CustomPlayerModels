buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
		maven { url "https://maven.fabricmc.net" }
		maven { url "https://repo.sleeping.town" }
		maven { url 'https://maven.minecraftforge.net/' }
	}
	dependencies {
		classpath "agency.highlysuspect:voldeloom:2.5-SNAPSHOT"
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
		classpath 'me.tatarka:gradle-retrolambda:3.7.1'
	}
}

apply plugin: 'java'
apply plugin: "agency.highlysuspect.voldeloom"
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.johnrengelman.shadow'

def useLib = System.getProperty("useLib")

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

retrolambda {
  javaVersion JavaVersion.VERSION_1_6
  defaultMethods true
  incremental false
}

version = project.mod_version
group = "com.yourname.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "CustomPlayerModels-1.4.7"

String minecraftVersion = "1.4.7"
String forgeVersion = "1.4.7-6.6.2.534"

volde {
	runs {
		client {
			programArg "tom5454"
			vmArg "-Xdebug"
			vmArg "-Xrunjdwp:server=y,transport=dt_socket,address=4100,suspend=y"
			vmArg "-Dcpm.debug=true"
			vmArg "-Dcpmcore.deobf=true"
		}
	}
}

sourceSets {
	main {
		java {
			srcDir "../CustomPlayerModels/src/shared/java"
			exclude "com/tom/cpl/util/NettyByteBufInputStream.java"
			srcDir "../CustomPlayerModels-1.6/src/retro/java"
		}
		resources {
			srcDir "../CustomPlayerModels/src/shared/resources"
			exclude "assets/*/lang/*.json"
			srcDir "../CustomPlayerModels-1.6/src/retro/resources"
		}
	}
}

configurations {
    priority
    sourceSets.main.compileClasspath = configurations.priority + sourceSets.main.compileClasspath
    shade
    implementation.extendsFrom shade
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	forge "net.minecraftforge:forge:${forgeVersion}:universal@zip"
	mappings "net.minecraftforge:forge:${forgeVersion}:src@zip"
	accessTransformers files("${buildDir}/at/META-INF/cpm_at.cfg")
	compileOnly "com.mojang:brigadier:1.0.18"
	
	if (useLib)priority "com.google.guava:guava:17.0"
	else implementation "com.google.guava:guava:17.0"
	shade "com.google.code.gson:gson:2.8.5"
}

jar {
    manifest {
        attributes(
                'FMLCorePlugin': 'com.tom.cpmcore.CPMLoadingPlugin')
    }
    
    classifier = 'dev-slim'
}

shadowJar {
	configurations = [project.configurations.shade]
	
	relocate 'com.google.gson', 'com.tom.cpm.externals.com.google.gson'
	
	exclude 'module-info.class'
	exclude 'META-INF/maven/**'
	
	classifier = 'dev'
}

tasks.named('remapJarForRelease').configure {
	dependsOn shadowJar
	input = file(shadowJar.archivePath)
	
	classifier = ''
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version
    }
    
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    
    from(files("${buildDir}/at"))
    
    duplicatesStrategy = "include"
}
//https://archive.org/details/minecraftcoderpack
//https://ia801701.us.archive.org/view_archive.php?archive=/29/items/minecraftcoderpack/minecraftcoderpack.zip
/*task downloadSRG(type: Copy) {
    def zipUrl = 'https://archive.org/download/minecraftcoderpack/minecraftcoderpack.zip/minecraftcoderpack%2F1.6.4%2Fmcp811.zip'
    def destinationDir = file("${buildDir}/extractedFiles")
    destinationDir.mkdirs()

    from(zipTree(zipUrl))
    into(destinationDir)
    include '** /*.srg'
    include '** /*.csv'

    println "Downloaded and extracted .srg files to: ${destinationDir}"
}*/

task remapAT {
	println "Loading remap data"
	def srgFilesDir = "${buildDir}/extractedFiles"
    def mappingFD = [:]
    def mappingCL = [:]
    def mappingMD = [:]
    def fieldMap = [:]
    def methodMap = [:]
    fileTree(dir: srgFilesDir, include: '**/*.srg').each { file ->
    	file.eachLine { line ->
            def parts = line.split(':')
            if (parts.size() == 2) {
                def type = parts[0].trim()
                def kv = parts[1].trim().split(" ")
                if (type == "FD") {
                	mappingFD[kv[1]] = kv[0]
                } else if (type == "CL") {
                	mappingCL[kv[1]] = kv[0]
                } else if (type == "MD") {
                    mappingMD[kv[2] + kv[3]] = kv[0] + kv[1]
                }
            }
        }
    }
    file(srgFilesDir + "/fields.csv").eachLine { line ->
    	def parts = line.split(',')
    	if (fieldMap[parts[0]] == null)
    		fieldMap[parts[0]] = parts[1]
    }
    def doPrint = false
    file(srgFilesDir + "/methods.csv").eachLine { line ->
    	def parts = line.split(',')
    	if (methodMap[parts[0]] == null)
    		methodMap[parts[0]] = parts[1]
    }
    
    println "Remapping ATs"
    def newText = ''
    file("./src/main/resources/META-INF/cpm_at_dev.cfg").eachLine { line ->
    	def parts = line.split(' ', 4)
    	if (parts.size() > 2) {
    		def mode = parts[0]
        	def clazz = parts[1]
        	def obj = parts[2]
        	def lookup = "?"
        	def own = clazz.substring(clazz.lastIndexOf(".") + 1)
        	println "Field: $own $obj"
        	fieldMap.each { intermediate, named ->
            	if (named == obj) {
               		def k = "net/minecraft/src/" + own + "/" + intermediate
               		println "  Considering: $k"
               		if (mappingFD[k] != null) {
               			lookup = mappingFD[k]
               			println "    Mapped: $lookup"
               			return false // Break out of the loop once found
               		}
               		k = "net/minecraft/client/" + own + "/" + intermediate
               		println "  Considering: $k"
               		if (mappingFD[k] != null) {
               			lookup = mappingFD[k]
               			println "    Mapped: $lookup"
               			return false // Break out of the loop once found
               		}
           		}
        	}
        	def fieldLookup = "net/minecraft/src/" + clazz.substring(clazz.lastIndexOf(".") + 1) + "/" + obj
        	def fieldInfo = mappingFD[fieldLookup]
        	if (fieldInfo != null)lookup = fieldInfo
        	if (lookup != null)lookup = lookup.replace("/", ".")
        	if (lookup == "?")logger.warn("Lookup failed")
    		newText += "$mode $lookup\n"
    	} else {
        	newText += line + '\n'
        }
    }
    def f = file("${buildDir}/at/META-INF/cpm_at.cfg")
    f.parentFile.mkdirs()
    f.text = newText
    
    println "Remapping Core names"
    newText = ''
    file("./src/main/resources/META-INF/cpm_core_dev.cfg").eachLine { line ->
    	def parts = line.split(' ', 4)
    	if (parts.size() > 1) {
    		def mode = parts[0]
    		def name = parts[1]
    		def lookup = "?"
    		if (mode.equals("method")) {
    			def ind = name.indexOf(';')
    			def own = name.substring(0, ind)
    			def nm = name.substring(ind + 1)
    			ind = nm.indexOf('(')
    			def mth = nm.substring(0, ind)
    			def par = nm.substring(ind).replaceAll("Lnet\\.minecraft\\.(?:[\\w]+\\.)+([\\w]+)\\;", "Lnet/minecraft/src/\$1;")
    			def par2 = nm.substring(ind).replaceAll("Lnet\\.minecraft\\.(?:[\\w]+\\.)+([\\w]+)\\;", "Lnet/minecraft/client/\$1;")
    			println "Method: $own $mth $par"
    			methodMap.each { intermediate, named ->
            		if (named == mth) {
                		def k = "net/minecraft/src/" + own + "/" + intermediate + par
                		println "  Considering: $k"
                		if (mappingMD[k] != null) {
                			lookup = mappingMD[k]
                			println "    Mapped: $lookup"
                			return false // Break out of the loop once found
                		}
                		k = "net/minecraft/client/" + own + "/" + intermediate + par
                		println "  Considering: $k"
                		if (mappingMD[k] != null) {
                			lookup = mappingMD[k]
                			println "    Mapped: $lookup"
                			return false // Break out of the loop once found
                		}
                		k = "net/minecraft/src/" + own + "/" + intermediate + par2
                		println "  Considering: $k"
                		if (mappingMD[k] != null) {
                			lookup = mappingMD[k]
                			println "    Mapped: $lookup"
                			return false // Break out of the loop once found
                		}
                		k = "net/minecraft/client/" + own + "/" + intermediate + par2
                		println "  Considering: $k"
                		if (mappingMD[k] != null) {
                			lookup = mappingMD[k]
                			println "    Mapped: $lookup"
                			return false // Break out of the loop once found
                		}
            		}
        		}
        		if (lookup == "?") {
        			def k = "net/minecraft/src/" + own + "/" + mth + par
        			println "  Considering: $k"
                	if (mappingMD[k] != null) {
                		lookup = mappingMD[k]
                		println "    Mapped: $lookup"
                	}
        		}
    		} else if (mode.equals("field")) {
    			def ind = name.indexOf(';')
    			def own = name.substring(0, ind)
    			def nm = name.substring(ind + 1)
    			println "Field: $own $nm"
    			fieldMap.each { intermediate, named ->
            		if (named == nm) {
                		def k = "net/minecraft/src/" + own + "/" + intermediate
                		println "  Considering: $k"
                		if (mappingFD[k] != null) {
                			lookup = mappingFD[k]
                			println "    Mapped: $lookup"
                			return false // Break out of the loop once found
                		}
                		k = "net/minecraft/client/" + own + "/" + intermediate
                		println "  Considering: $k"
                		if (mappingFD[k] != null) {
                			lookup = mappingFD[k]
                			println "    Mapped: $lookup"
                			return false // Break out of the loop once found
                		}
            		}
        		}
    		} else if (mode.equals("class")) {
        		println "Class: $name"
        		def par = name.replaceAll("net\\.minecraft\\.(?:[\\w]+\\.)+([\\w]+)", "net/minecraft/src/\$1")
    			def par2 = name.replaceAll("net\\.minecraft\\.(?:[\\w]+\\.)+([\\w]+)", "net/minecraft/client/\$1")
    			println "  Considering: $par"
    			if (mappingCL[par] != null) {
    				lookup = mappingCL[par];
    				println "    Mapped: $lookup"
    			}
    			println "  Considering: $par2"
    			if (mappingCL[par2] != null) {
    				lookup = mappingCL[par2];
    				println "    Mapped: $lookup"
    			}
    		}
    		if (lookup == "?")logger.warn("Lookup failed")
    		newText += "$mode $name $lookup\n"
    	} else {
        	newText += line + '\n'
    	}
    }
    file("${buildDir}/at/META-INF/cpm_core.cfg").text = newText
}

//remapAT.dependsOn(downloadSRG)

task copyArtifact(type: Copy, dependsOn: 'build') {
    def artifactDir = file("${buildDir}/libs/$archivesBaseName-$version-dev.jar")
    def artifactDirSlim = file("${buildDir}/libs/$archivesBaseName-$version-dev-slim.jar")
    println "Artifact: ${artifactDir}"
    def destinationDir = file("./run/coremods") // Update this with your desired destination folder

    // Clean the destination folder before copying
    doFirst {
        delete destinationDir
    }

    // Ensure the destination directory exists
    destinationDir.mkdirs()

    // Copy the artifact to the destination directory
    from artifactDir
    into destinationDir

    doLast {
        println "Copied artifact to: ${destinationDir}"
        delete artifactDir // Gradle dumb
        delete artifactDirSlim // Gradle dumb
    }
}