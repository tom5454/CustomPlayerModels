plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

repositories {
	maven { url "https://maven.terraformersmc.com/releases/"}
	maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

def useLib = System.getProperty("useLib")

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	modImplementation("com.terraformersmc:modmenu:7.1.0") {
        exclude(group: "net.fabricmc.fabric-api")
    }
	
	modImplementation ('maven.modrinth:pehkui:3.8.2+1.14.4-1.20.6')
	
	compileOnly files("../CustomPlayerModels-1.20/stubs/of.jar")
	compileOnly files("../CustomPlayerModels-1.20/stubs/iris_old.jar")
	
    modImplementation ('maven.modrinth:vivecraft:1.20.1-1.2.0-fabric')
    implementation('com.electronwill.night-config:toml:3.6.6')
    implementation('com.electronwill.night-config:core:3.6.6')
    implementation("org.lwjgl:lwjgl-openvr:3.3.1")
    implementation("org.lwjgl:lwjgl-openvr:3.3.1:natives-linux")
    implementation("org.lwjgl:lwjgl-openvr:3.3.1:natives-macos")
    implementation("org.lwjgl:lwjgl-openvr:3.3.1:natives-windows")
	implementation("com.illposed.osc:javaosc-core:0.9")
    implementation("org.joml:joml:1.10.2")
    
    modImplementation("com.jamieswhiteshirt:reach-entity-attributes:2.4.0")
    
    modImplementation('maven.modrinth:first-person-model:UtdDBPeE')
    modImplementation('maven.modrinth:sodium:mc1.20.1-0.5.8')
    modImplementation('maven.modrinth:iris:KHQ2Hnpt')
    
    modImplementation("org.antlr:antlr4-runtime:4.11.1")
    modImplementation("io.github.douira:glsl-transformer:2.0.0-pre13")
    modImplementation("org.anarres:jcpp:1.4.14")
}

loom {
	accessWidenerPath = file("src/main/resources/cpm.accesswidener")
	runs {
		client {
			vmArg "-Dmixin.debug.verbose=true"
			vmArg "-Dmixin.debug.export=true"
		}
	}
}

sourceSets {
	main {
		java {
			srcDir "../CustomPlayerModels/src/shared/java"
			srcDir "../CustomPlayerModels-1.20/src/platform-shared/java"
			srcDir "src/rawmc-shared/java"
		}
		resources {
			srcDir "../CustomPlayerModels/src/shared/resources"
			srcDir "../CustomPlayerModels-1.20/src/platform-shared/resources"
			srcDir "src/rawmc-shared/resources"
			exclude "**/*.lang"
		}
	}
}


processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
